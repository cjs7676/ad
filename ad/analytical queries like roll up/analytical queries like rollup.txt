Implementation of Analytical queries like Roll_UP, CUBE, First,
Last, Rank AND Dense Rank using oracle
--for formating purpose only--
set lines 256
set trimout on
set tab off

CREATE TABLE employees (
    employee_id NUMBER,
    ename VARCHAR2(50),
    department VARCHAR2(50),
    job VARCHAR2(50),
    salary NUMBER,
    hire_date DATE
);




Create a Partitioned Table (for ROLLUP and CUBE):

CREATE TABLE partitioned_employees (
    employee_id NUMBER,
    ename VARCHAR2(50),
    department VARCHAR2(50),
    job VARCHAR2(50),
    salary NUMBER,
    hire_date DATE
)
PARTITION BY RANGE (hire_date) (
    PARTITION emp_hiredate_jan2020 VALUES LESS THAN (TO_DATE('2020-02-01', 'YYYY-MM-DD')),
    PARTITION emp_hiredate_feb2020 VALUES LESS THAN (TO_DATE('2020-03-01', 'YYYY-MM-DD')),
    PARTITION emp_hiredate_mar2020 VALUES LESS THAN (TO_DATE('2020-04-01', 'YYYY-MM-DD')),
    -- Add more partitions as needed
    PARTITION emp_hiredate_default VALUES LESS THAN (MAXVALUE)
);

Create a Partitioned Table (for RANK and DENSE_RANK):

CREATE TABLE partitioned_employees_rank (
    employee_id NUMBER,
    ename VARCHAR2(50),
    department VARCHAR2(50),
    job VARCHAR2(50),
    salary NUMBER,
    hire_date DATE
)
PARTITION BY LIST (department) (
    PARTITION emp_it VALUES ('IT'),
    PARTITION emp_hr VALUES ('HR'),
    PARTITION emp_sales VALUES ('Sales'),
    -- Add more partitions as needed
    PARTITION emp_other VALUES (DEFAULT)
);



INSERT INTO employees (employee_id, ename, department, job, salary, hire_date)
VALUES (1, 'John Doe', 'IT', 'Programmer', 80000, TO_DATE('2020-01-15', 'YYYY-MM-DD'));


INSERT INTO employees (employee_id, ename, department, job, salary, hire_date)
VALUES (2, 'Jane Smith', 'HR', 'HR Manager', 90000, TO_DATE('2019-12-10', 'YYYY-MM-DD'));


INSERT INTO employees (employee_id, ename, department, job, salary, hire_date)
VALUES (3, 'Bob Johnson', 'Sales', 'Sales Associate', 75000, TO_DATE('2020-02-20', 'YYYY-MM-DD'));


INSERT INTO employees (employee_id, ename, department, job, salary, hire_date)
VALUES (4, 'Alice Brown', 'IT', 'Database Administrator', 85000, TO_DATE('2020-03-05', 'YYYY-MM-DD'));


INSERT INTO employees (employee_id, ename, department, job, salary, hire_date)
VALUES (5, 'Eva Green', 'HR', 'HR Coordinator', 70000, TO_DATE('2020-02-01', 'YYYY-MM-DD'));


INSERT INTO employees (employee_id, ename, department, job, salary, hire_date)
VALUES (6, 'David Lee', 'Sales', 'Sales Manager', 95000, TO_DATE('2020-01-20', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, ename, department, job, salary, hire_date)
VALUES (7, 'Grace Turner', 'IT', 'Programmer', 82000, TO_DATE('2020-02-25', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, ename, department, job, salary, hire_date)
VALUES (8, 'Michael White', 'HR', 'HR Manager', 92000, TO_DATE('2020-03-10', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, ename, department, job, salary, hire_date)
VALUES (9, 'Linda Davis', 'Sales', 'Sales Associate', 78000, TO_DATE('2019-12-05', 'YYYY-MM-DD'));

INSERT INTO employees (employee_id, ename, department, job, salary, hire_date)
VALUES (10, 'Tom Clark', 'IT', 'Database Administrator', 89000, TO_DATE('2020-01-10', 'YYYY-MM-DD'));



-- Insert into January 2020 partition
INSERT INTO partitioned_employees
PARTITION (emp_hiredate_jan2020)
(employee_id, ename, department, job, salary, hire_date)
VALUES (11, 'Mark Johnson', 'IT', 'Programmer', 81000, TO_DATE('2020-01-25', 'YYYY-MM-DD'));

-- Insert into February 2020 partition
INSERT INTO partitioned_employees
PARTITION (emp_hiredate_feb2020)
(employee_id, ename, department, job, salary, hire_date)
VALUES (12, 'Sarah Adams', 'Sales', 'Sales Associate', 76000, TO_DATE('2020-02-15', 'YYYY-MM-DD'));

-- Continue inserting into other partitions as needed


-- Insert into IT partition
INSERT INTO partitioned_employees_rank PARTITION (emp_it)
(employee_id, ename, department, job, salary, hire_date)
VALUES (13, 'Chris Martin', 'IT', 'Programmer', 83000, TO_DATE('2020-03-15', 'YYYY-MM-DD'));

-- Insert into HR partition
INSERT INTO partitioned_employees_rank PARTITION (emp_hr)
(employee_id, ename, department, job, salary, hire_date)
VALUES (14, 'Anna Wilson', 'HR', 'HR Manager', 91000, TO_DATE('2020-01-05', 'YYYY-MM-DD'));

-- Continue inserting into other partitions as needed



-- ROLLUP example
SELECT department, job, SUM(salary) AS total_salary
FROM employees
GROUP BY ROLLUP (department, job);

-- CUBE example
SELECT department, job, SUM(salary) AS total_salary
FROM employees
GROUP BY CUBE (department, job);



-- FIRST and LAST example
SELECT department, job, ename,
       FIRST_VALUE(salary) OVER(PARTITION BY department, job ORDER BY hire_date) AS first_salary,
       LAST_VALUE(salary) OVER(PARTITION BY department, job ORDER BY hire_date) AS last_salary
FROM employees;



-- RANK and DENSE_RANK example
SELECT department, job, ename, salary,
       RANK() OVER(PARTITION BY department, job ORDER BY salary DESC) AS rank,
       DENSE_RANK() OVER(PARTITION BY department, job ORDER BY salary DESC) AS dense_rank
FROM employees;
